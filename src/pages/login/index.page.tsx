import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { FormGroup } from "components/Form/FormGroup";
import { Input } from "components/Form/Input";
import { Label } from "components/Form/Label";
import { api } from "@/lib/http";
import styles from "./login.module.css";
import { withIronSessionSsr } from "iron-session/next";
import { config } from "@/config";
import { ironConfig } from "pages/api/_utils/ironConfig";

interface LoginProps {
  user: any;
}

export const getServerSideProps = withIronSessionSsr(
  async function getServerSideProps({ req }) {
    const [user] = await Promise.all([
      fetch(`${config.origin}/auth/me`, {
        headers: {
          authorization: `Bearer ${(req.session as any).access_token}`,
        },
      })
        .then((res) => res.json())
        .catch(() => null),
    ]);
    console.log({ user });
    return { props: { user } };
  },
  ironConfig
);

const Login: NextPage<LoginProps> = ({ user }: LoginProps) => {
  const router = useRouter();
  const queryEmail = router.query.email
    ? [router.query.email].flat().join("")
    : undefined;
  const queryCode = router.query.code as undefined | string;
  const [email, setEmail] = useState<string>();
  const [isPending, setIsPending] = useState(false);

  useEffect(() => {
    if (queryEmail && queryCode) {
      (async () => {
        const orgId = prompt("Org Id");
        const ret = (await api
          .url(`/auth/${orgId}/login`)
          .post({ email: queryEmail, code: queryCode })
          .json()) as { access_token: string };

        localStorage["doubtful:jwt"] = ret.access_token;

        router.push("/");
      })();
    }
  }, [queryEmail, queryCode, router]);

  if (user) {
    return (
      <div className={styles.container}>
        <h1 className={styles.title}>You are already logged in</h1>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Doubtful.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={`${styles.main} ${styles.loginMain}`}>
        <h1 className={styles.title}>
          But first, you&apos;ve got to Log In...
        </h1>

        <section>
          <form
            action="#"
            onSubmit={async (ev) => {
              ev.preventDefault();
              try {
                setIsPending(true);
                const formData = new FormData(ev.target as HTMLFormElement);
                const code = formData.get("code")?.toString();
                const formEmail = formData.get("email")?.toString() || email;
                const orgId = prompt("Org ID");

                if (code) {
                  const ret = (await api
                    .url(`/auth/${orgId}/login`)
                    .post({ email: formEmail, code })
                    .json()) as { access_token: string };

                  localStorage["doubtful:jwt"] = ret.access_token;

                  router.push("/");
                } else if (formEmail) {
                  await api
                    .url(`/auth/${orgId}/login`)
                    .post({ email: formEmail, code: "code" })
                    .json();
                  setEmail(formEmail);
                }
              } finally {
                setIsPending(false);
              }
            }}
          >
            {!email ? (
              <FormGroup>
                <Label label="Email Address" name="email" />
                <Input
                  key="email"
                  name="email"
                  onChange={() => {}}
                  placeholder="joe@bloggs.com"
                  disabled={false}
                  defaultValue=""
                />
                <br />
                <button
                  type="submit"
                  disabled={isPending}
                  className={styles.button}
                >
                  Send Code
                </button>
              </FormGroup>
            ) : (
              <FormGroup>
                <Label label="Code" name="code" />
                <Input
                  key="code"
                  name="code"
                  onChange={() => {}}
                  placeholder="· · · · · ·"
                  disabled={false}
                  defaultValue=""
                />
                <button
                  type="submit"
                  disabled={isPending}
                  className={styles.button}
                >
                  Sign in
                </button>
              </FormGroup>
            )}
          </form>
        </section>
      </main>
    </div>
  );
};

export default Login;
